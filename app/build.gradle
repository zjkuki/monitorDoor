import java.nio.MappedByteBuffer
import java.nio.channels.FileChannel
import java.security.MessageDigest

apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

def apath
def appVersionFile = "appVersion.txt"
def md5 = MessageDigest.getInstance("MD5")

android {
    compileSdkVersion 28
//    sourceSets {
//        main {
//            jniLibs.srcDirs = ['libs']
//        }
//
//        // Move the tests to tests/java, tests/res, etc...
//        androidTest.setRoot('tests')
//
//        // Move the build types to build-types/<type>
//        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
//        // This moves them out of them default location under src/<type>/... which would
//        // conflict with src/ being used by the main source set.
//        // Adding new build types or product flavors should be accompanied
//        // by a similar customization.
//        debug.setRoot('build-types/debug')
//        release.setRoot('build-types/release')
//    }
    defaultConfig {
        applicationId "com.lkd.smartlocker"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_TOOLCHAIN=clang", "-DANDROID_PLATFORM=android-21"
                cppFlags "-std=c++11 -frtti -fexceptions"
            }
        }
        ndk {
            abiFilters "armeabi",'x86'
        }

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }

    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    signingConfigs {
        release {
            storeFile file('..\\lkd.jks')
            storePassword KEY_PASS
            keyAlias ALIAS_NAME
            keyPassword ALIAS_PASS
        }

        debug {
            keyAlias 'lkd'
            keyPassword '123123'
            storeFile file('..\\lkd.jks')
            storePassword '123123'
        }
    }

    buildTypes {
        debug {
            debuggable = true
            jniDebuggable = true
            minifyEnabled = false
            zipAlignEnabled = false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            debuggable = false
            jniDebuggable = false
            minifyEnabled = false
            zipAlignEnabled = true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }


    useLibrary 'org.apache.http.legacy'
//    dexOptions {
//        jumboMode true
//        javaMaxHeapSize "4g"
//    }
    configurations.all {
        resolutionStrategy.eachDependency { details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion '28.0.0'
                }
            }
        }
    }
    buildToolsVersion '28.0.3'

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    android.applicationVariants.all { variant ->
        // variant.outputs.each { output ->
        // def outputFile = output.outputFile

        variant.outputs.all {
            outputFileName = "${variant.applicationId}_v${variant.versionName}_${releaseTime()}.apk"
        }
        //}
    }

    task generateAppVersionFile {
        dependsOn "assembleRelease"
        doLast {
            def pathSplitStr
            if (isWindows()) {
                pathSplitStr = "\\"
            } else {
                pathSplitStr = "/"
            }
            println("appVariants size=" + android.applicationVariants.findAll().size().toString())
            android.applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    //apath = android.applicationVariants.first().outputs.first().outputFile
                    apath = output.outputFile

                    println("apk file=" + apath)
                    FileInputStream fs = new FileInputStream(apath)
                    def fn
                    def value
                    try {
                        MappedByteBuffer byteBuffer = fs.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, apath.length())
                        md5.update(byteBuffer)
                        BigInteger bi = new BigInteger(1, md5.digest())
                        value = bi.toString(16)
                        fn = apath.absolutePath.substring(apath.absolutePath.lastIndexOf(pathSplitStr) + 1, apath.absolutePath.lastIndexOf(".apk"))
                        println("file=" + fn + "   MD5=" + value)
                    } catch (Exception e) {
                        e.printStackTrace()
                    } finally {
                        def writepath = apath.absolutePath.substring(0, apath.absolutePath.lastIndexOf(pathSplitStr)).toString()
                        println("OutPutFilePath=" + writepath)
                        FileWriter writer = new FileWriter(writepath + pathSplitStr + appVersionFile)
                        //--加号必须写在上一行结尾，否则报错！！！
                        def json = "{\"versionCode\":" + variant.versionCode.toString() + ",\n\"isForceUpdate\":0,\n\"preBaselineCode\":0,\n\"versionName\":" + variant.versionName.toString() +
                                ",\n\"downUrl\":\"http://121.37.25.137/files/" + fn.toString() + ".apk\",\n\"md5\":\"" + value.toString() + "\",\n\"updateLog\":" +
                                "\"注意事项：\n     如果您的手机在线更新无法自动安装，请进入【设置】->【安全与隐私】->【未知来源应用下载】的选项打开为允许状态\n更新内容：\n  1）WiFi控制板问题修正；\n\"}\n"
                        //"\"1）解决开始按钮的卡慢问题；\n2）加入熄屏运行机制\n3）修复文件生成时间的BUG\n4）解决指定文件夹无法搜索的问题\"}\n"

                        println("json str=" + json)
                        writer.write(json)
                        /*writer.write("Hello Kuka:\n")
                        writer.write("  My name is coolszy!\n")
                        writer.write("  I like you and miss you。")*/
                        writer.close()
                    }
                    if (fs != null) {
                        fs.close()
                    }

                }
            }
        }
    }
}
dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation "com.android.support:design:28.0.0"
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar'
    //implementation (name:'libxmfunsdk-release', ext: 'aar')
    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.qmuiteam:qmui:1.4.0'
    implementation 'com.qmuiteam:arch:0.6.1'
    implementation files('libs/lite-orm-1.9.2.jar')
    // 封装fragment的框架
    api 'me.yokeyword:fragmentation:1.3.7'
    // easylink
    //implementation 'io.fogcloud.sdk:easylinkv3:0.2.6'
    implementation 'io.fogcloud.sdk:easylinkv3:0.1.5'
    //implementation 'ru.alexbykov:nopermission:1.1.2'
    implementation 'io.fogcloud.sdk:mdns:0.0.3'
    //implementation 'io.fogcloud.sdk:mqtt:0.2.2'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.0'
    implementation 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'
    implementation 'com.github.HanHuoBin:BaseDialog:1.2.0'
    implementation 'com.github.ittianyu:BottomNavigationViewEx:2.0.4'
    implementation 'com.github.huangxiaoguo1:hxgsecurity:1.0.0'

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    implementation 'com.zhy:okhttputils:2.6.2'
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'

    implementation 'com.android.support:multidex:1.0.1'

    implementation 'commons-codec:commons-codec:1.11'
    implementation project(path: ':autoUpdate')

}